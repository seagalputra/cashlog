// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateTransaction struct {
	Title             string  `json:"title"`
	Amount            string  `json:"amount"`
	TransactionDate   string  `json:"transactionDate"`
	Description       *string `json:"description"`
	TransactionStatus string  `json:"transactionStatus"`
	TransactionType   *string `json:"transactionType"`
}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type RegisterUser struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Email     string `json:"email"`
}

type Transaction struct {
	ID              string             `json:"id"`
	TransactionID   string             `json:"transactionId"`
	Title           string             `json:"title"`
	Amount          string             `json:"amount"`
	TransactionDate string             `json:"transactionDate"`
	Datail          *TransactionDetail `json:"datail"`
	User            *User              `json:"user"`
}

type TransactionDetail struct {
	ID                  string            `json:"id"`
	TransactionDetailID string            `json:"transactionDetailId"`
	Needs               string            `json:"needs"`
	Wants               string            `json:"wants"`
	Invest              string            `json:"invest"`
	Description         string            `json:"description"`
	Status              TransactionStatus `json:"status"`
}

type User struct {
	ID         string `json:"id"`
	UserID     string `json:"userId"`
	FirstName  string `json:"firstName"`
	LastName   string `json:"lastName"`
	Username   string `json:"username"`
	Password   string `json:"password"`
	Email      string `json:"email"`
	IsDisabled bool   `json:"isDisabled"`
	IsVerified bool   `json:"isVerified"`
}

type TransactionStatus string

const (
	TransactionStatusIncome   TransactionStatus = "INCOME"
	TransactionStatusOutcome  TransactionStatus = "OUTCOME"
	TransactionStatusWatiting TransactionStatus = "WATITING"
)

var AllTransactionStatus = []TransactionStatus{
	TransactionStatusIncome,
	TransactionStatusOutcome,
	TransactionStatusWatiting,
}

func (e TransactionStatus) IsValid() bool {
	switch e {
	case TransactionStatusIncome, TransactionStatusOutcome, TransactionStatusWatiting:
		return true
	}
	return false
}

func (e TransactionStatus) String() string {
	return string(e)
}

func (e *TransactionStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TransactionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TransactionStatus", str)
	}
	return nil
}

func (e TransactionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
